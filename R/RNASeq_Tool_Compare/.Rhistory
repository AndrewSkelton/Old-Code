library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
setwd("~/Documents/Sulaco/Loughlin/project_master_branch/methylation/Analysis/Louise/Age_Slope/")
load("Slope_Data.Rdata")
wb    <- createWorkbook()
library("xlsx")
wb    <- createWorkbook()
setwd("~/Documents/Sulaco/Loughlin/project_master_branch/methylation/Analysis/Louise/Age_Slope/")
load("Slope_Data.Rdata")
remove(wb)
wb    <- createWorkbook()
setwd("~/Documents/Sulaco/Loughlin/project_master_branch/methylation/Analysis/Louise/Age_Slope/")
load("Slope_Data.Rdata")
wb    <- createWorkbook()
sheet <- createSheet(wb, sheetName="Pheno_In")
addDataFrame(pheno_data, sheet, startRow=1, startColumn=1)
sheet <- createSheet(wb, sheetName="Hip_Control_TopTable")
addDataFrame(Hip_Control_TopTable, sheet, startRow=1, startColumn=1)
sheet <- createSheet(wb, sheetName="Hip_Control_Betas")
addDataFrame(Hip_Control_Betas, sheet, startRow=1, startColumn=1)
sheet <- createSheet(wb, sheetName="OA_Hip_TopTable")
addDataFrame(OA_Hip_TopTable, sheet, startRow=1, startColumn=1)
sheet <- createSheet(wb, sheetName="OA_Hip_Betas")
addDataFrame(OA_Hip_Betas, sheet, startRow=1, startColumn=1)
sheet <- createSheet(wb, sheetName="OA_Knee_TopTable")
addDataFrame(OA_Knee_TopTable, sheet, startRow=1, startColumn=1)
sheet <- createSheet(wb, sheetName="OA_Knee_Betas")
addDataFrame(OA_Knee_Betas, sheet, startRow=1, startColumn=1)
saveWorkbook(wb, file="Louise_Age_Slope_Data.xlsx")
setwd("~/Documents/Sulaco/Loughlin/project_master_branch/methylation/Analysis/Louise/Age_Slope/")
load("Slope_Data.Rdata")
wb    <- createWorkbook()
sheet <- createSheet(wb, sheetName="Pheno_In")
addDataFrame(pheno_data, sheet, startRow=1, startColumn=1)
sheet <- createSheet(wb, sheetName="Hip_Control_TopTable")
addDataFrame(Hip_Control_TopTable, sheet, startRow=1, startColumn=1)
sheet <- createSheet(wb, sheetName="Hip_Control_Betas")
addDataFrame(Hip_Control_Betas, sheet, startRow=1, startColumn=1)
sheet <- createSheet(wb, sheetName="OA_Hip_TopTable")
addDataFrame(OA_Hip_TopTable, sheet, startRow=1, startColumn=1)
sheet <- createSheet(wb, sheetName="OA_Hip_Betas")
addDataFrame(OA_Hip_Betas, sheet, startRow=1, startColumn=1)
sheet <- createSheet(wb, sheetName="OA_Knee_TopTable")
addDataFrame(OA_Knee_TopTable, sheet, startRow=1, startColumn=1)
sheet <- createSheet(wb, sheetName="OA_Knee_Betas")
addDataFrame(OA_Knee_Betas, sheet, startRow=1, startColumn=1)
saveWorkbook(wb, file="Louise_Age_Slope_Data.xlsx")
library(EBSeq)
##'-----------------------------------------------------------------------------------------#
##'Utility Function - get_counts
##'                 - Description : Reads in a Salmon Output file and converts it to a
##'                                 useful dataframe structure
##'                 - Parameters  : file - path and filename of the Salmon .sf file
##'-----------------------------------------------------------------------------------------#
get_counts = function(file) {
dat               <- read.table(file, skip=10, sep="\t", stringsAsFactors=F, row.names=1)
raw_counts        <- dat[,4]
names(raw_counts) <- rownames(dat)
return(raw_counts)
}
##'-----------------------------------------------------------------------------------------#
##'Salmon - Gene Level - Get Normalised Counts
##'-----------------------------------------------------------------------------------------#
setwd("~/Documents/Bioinformatics/Customers/Young/Test/salmon/grch38_gene")
gene_files_in       <- list.files("./genes/",
pattern="*.sf",
full.names=T)
gene_counts         <- lapply(gene_files_in,
get_counts)
gene_count_table    <- matrix(nrow=length(gene_counts[[1]]),
ncol=length(gene_files_in))
str(gene_counts)
#-------------------------------------------------------------------------------------------#
#  Author      : Andrew J Skelton                                                           |
#  Language    : R Statistical Programming Language                                         |
#  Study       : RNA Seq Quantification Tool Compare                                        |
#  Data Owner  : Worked Example Using NOF OA RNA Seq Data - Prof. David Young               |
#  Description : RNA Seq Quantification Tool Compare - Salmon                               |
#-------------------------------------------------------------------------------------------#
##'Set the Working Directory, load essential packages, and import files
##'-----------------------------------------------------------------------------------------#
source("http://bioconductor.org/biocLite.R")
biocLite()
library(EBSeq)
setwd("~/Documents/Bioinformatics/Customers/Young/Test/salmon/grch38_gene")
pheno_in <- read.table("Pheno.txt",
sep="\t",
header=T,
row.names=1)
##'-----------------------------------------------------------------------------------------#
##'Utility Function - get_counts
##'                 - Description : Reads in a Salmon Output file and converts it to a
##'                                 useful dataframe structure
##'                 - Parameters  : file - path and filename of the Salmon .sf file
##'-----------------------------------------------------------------------------------------#
get_counts = function(file) {
dat               <- read.table(file, skip=10, sep="\t", stringsAsFactors=F, row.names=1)
raw_counts        <- dat[,4]
names(raw_counts) <- rownames(dat)
return(raw_counts)
}
##'-----------------------------------------------------------------------------------------#
##'Salmon - Gene Level - Get Normalised Counts
##'-----------------------------------------------------------------------------------------#
gene_files_in       <- list.files("./genes/",
pattern="*.sf",
full.names=T)
gene_counts         <- lapply(gene_files_in,
get_counts)
gene_count_table    <- matrix(nrow=length(gene_counts[[1]]),
ncol=length(gene_files_in))
for(i in 1:length(gene_counts)) {
gene_count_table[,i] <- gene_counts[[i]]
}
rownames(gene_count_table) <- names(gene_counts[[1]])
colnames(gene_count_table) <- gsub(".sf", "", gene_files_in)
Sizes                      <- MedianNorm(gene_count_table)
Salmon_Gene_Counts         <- GetNormalizedMat(gene_count_table, Sizes)
##'-----------------------------------------------------------------------------------------#
##'Salmon - Transcript Level - Get Normalised Counts
##'-----------------------------------------------------------------------------------------#
transcript_files_in    <- list.files("../grch38/alignment/",
pattern="*.sf",
full.names=T)
transcript_counts      <- lapply(transcript_files_in,
get_counts)
transcript_count_table <- matrix(nrow=length(transcript_counts[[1]]),
ncol=length(transcript_files_in))
for(i in 1:length(transcript_counts)) {
transcript_count_table[,i] <- transcript_counts[[i]]
}
rownames(transcript_count_table) <- names(transcript_counts[[1]])
colnames(transcript_count_table) <- gsub(".sf", "", transcript_files_in)
Sizes                            <- MedianNorm(transcript_count_table)
Salmon_Trans_Counts              <- GetNormalizedMat(transcript_count_table, Sizes)
##'-----------------------------------------------------------------------------------------#
##'Save Outputs to keep from processing again
##'-----------------------------------------------------------------------------------------#
save(pheno_in, Salmon_Gene_Counts, Salmon_Trans_Counts, file="Salmon_Data.Rdata")
##'-----------------------------------------------------------------------------------------#
library(DESeq2)
setwd("~/Documents/Bioinformatics/Customers/Young/Test/htseq_count/grch38/")
##'-----------------------------------------------------------------------------------------#
##'DESeq2 - Get Normalised Counts
##'-----------------------------------------------------------------------------------------#
des                <- DESeqDataSetFromHTSeqCount(pheno_in,
directory="./",
design= ~ Treatment)
des                <- DESeq(des)
DESeq2_Gene_Counts <- counts(des, normalized=T)
##'-----------------------------------------------------------------------------------------#
##'Save Normalised Counts to save re-processing time
##'-----------------------------------------------------------------------------------------#
save(DESeq2_Gene_Counts, file="DESeq2_Data.Rdata")
##'-----------------------------------------------------------------------------------------#
setwd("~/Documents/Bioinformatics/Customers/Young/Test/kallisto/grch38/alignment/")
pheno_in <- read.table("../Pheno.txt",
sep="\t",
header=T,
row.names=1)
##'-----------------------------------------------------------------------------------------#
##'Get Normalised Counts - Kallisto - Gene Level
##'-----------------------------------------------------------------------------------------#
#Apparently Coming Soon
##'-----------------------------------------------------------------------------------------#
##'Get Normalised Counts - Kallisto - Transcript Level
##'-----------------------------------------------------------------------------------------#
df_kallisto <- matrix()
for(i in 1:length(list.files())) {
sample_in  <- read.table(list.files()[i], sep="\t", header=T)
sample_tmp <- sample_in[,c(1,4)]
colnames(sample_tmp)[2] <- list.files()[i]
df_kallisto <- cbind(df_kallisto, sample_tmp)
}
df_kallisto                          <- df_kallisto[,c(2,seq(3,ncol(df_kallisto),2))]
rownames(df_kallisto)                <- df_kallisto$target_id
Kallisto_Transcript_Counts           <- df_kallisto[,-1]
colnames(Kallisto_Transcript_Counts) <- pheno_in$Sample
##'-----------------------------------------------------------------------------------------#
##'Save Tables
##'-----------------------------------------------------------------------------------------#
save(Kallisto_Transcript_Counts, file="Kallisto_Data.Rdata")
##'-----------------------------------------------------------------------------------------#
library(biomaRt)
setwd("~/Documents/Bioinformatics/Customers/Young/Test")
# load("Salmon_Data.Rdata")
##'-----------------------------------------------------------------------------------------#
##'Get Annotation for all Ensemble GRCh38 Known Transcripts
##'-----------------------------------------------------------------------------------------#
transcript_names <- rownames(Salmon_Trans_Counts)
ensembl          <- useMart("ensembl",
dataset="hsapiens_gene_ensembl")
annotation       <- getBM(attributes=c("ensembl_transcript_id",
"ensembl_gene_id",
"external_gene_name",
"description"),
filters="ensembl_transcript_id",
values=transcript_names,
ensembl)
annotation       <- annotation[match(transcript_names,
annotation$ensembl_transcript_id),]
##'-----------------------------------------------------------------------------------------#
##'Save Tables
##'-----------------------------------------------------------------------------------------#
save(annotation, file="Annotation_Data.Rdata")
library(cummeRbund)
setwd("~/Documents/Bioinformatics/Customers/Young/Test/grch38_No_Novel_v2/")
xloc_map             <- read.table("genes.fpkm_tracking", sep="\t", header=T)
tcons_map            <- read.table("isoforms.fpkm_tracking", sep="\t", header=T)
cuff                 <- readCufflinks()
##'-----------------------------------------------------------------------------------------#
##'Get Normalised Counts - Tuxedo - Gene Level
##'-----------------------------------------------------------------------------------------#
Tuxedo_Gene_Counts       <- repCountMatrix(genes(cuff))
# gene.counts.fpkm      <- repFpkmMatrix(genes(cuff))
##'-----------------------------------------------------------------------------------------#
##'Get Normalised Counts - Tuxedo - Transcript Level
##'-----------------------------------------------------------------------------------------#
Tuxedo_Transcript_Counts <- repCountMatrix(isoforms(cuff))
# isoform.counts.fpkm   <- repFpkmMatrix(isoforms(cuff))
##'-----------------------------------------------------------------------------------------#
##'Save Tables
##'-----------------------------------------------------------------------------------------#
save(Tuxedo_Gene_Counts, Tuxedo_Transcript_Counts, file="Tuxedo_Data.Rdata")
##'-----------------------------------------------------------------------------------------#
##'-----------------------------------------------------------------------------------------#
save(Tuxedo_Gene_Counts, Tuxedo_Transcript_Counts,
xloc_map, tcons_map
file="Tuxedo_Data.Rdata")
save(Tuxedo_Gene_Counts, Tuxedo_Transcript_Counts,
xloc_map, tcons_map,
file="Tuxedo_Data.Rdata")
library(reshape2)
library(scales)
library(ggplot2)
setwd("~/Documents/Repos/Bioinformatics_Sprt_Code/R/RNASeq_Tool_Compare")
load("RData/Annotation_Data.Rdata")
load("RData/DESeq2_Data.Rdata")
load("RData/Salmon_Data.Rdata")
load("RData/Kallisto_Data.Rdata")
load("RData/Tuxedo_Data.Rdata")
head(Tuxedo_Transcript_Counts)
plot(Tuxedo_Transcript_Counts$NOF_0)
plot(Tuxedo_Transcript_Counts$NOF_0)
head(Tuxedo_Gene_Counts)
head(DESeq2_Gene_Counts)
head(Kallisto_Transcript_Counts)
head(Salmon_Gene_Counts)
head(Salmon_Trans_Counts)
pheno_in
colnames(Salmon_Gene_Counts)  <- pheno_in$Sample
colnames(Salmon_Trans_Counts) <- pheno_in$Sample
c(pheno_in[pheno_in$Treatment == "NOF",]$Sample,
pheno_in[pheno_in$Treatment == "OA",]$Sample)
c(as.vector(pheno_in[pheno_in$Treatment == "NOF",]$Sample),
as.vector(pheno_in[pheno_in$Treatment == "OA",]$Sample))
head(Tuxedo_Transcript_Counts)
colnames(Salmon_Gene_Counts)       <- pheno_in$Sample
colnames(Salmon_Trans_Counts)      <- pheno_in$Sample
colnames(Tuxedo_Transcript_Counts) <- c(as.vector(pheno_in[pheno_in$Treatment == "NOF",]$Sample),
as.vector(pheno_in[pheno_in$Treatment == "OA",]$Sample))
colnames(Tuxedo_Gene_Counts)       <- c(as.vector(pheno_in[pheno_in$Treatment == "NOF",]$Sample),
as.vector(pheno_in[pheno_in$Treatment == "OA",]$Sample))
head(Tuxedo_Transcript_Counts)
head(Tuxedo_Gene_Counts)
head(DESeq2_Gene_Counts)
head(Kallisto_Transcript_Counts)
head(Salmon_Gene_Counts)
head(Salmon_Trans_Counts)
head(Kallisto_Transcript_Counts)
Tux_Trans_melt <- melt(Tuxedo_Transcript_Counts)
head(Tux_Trans_melt)
Tux_Trans_melt <- melt(as.matrix(Tuxedo_Transcript_Counts))
head(Tux_Trans_melt)
head(tcons_map)
Tux_Trans_melt <- merge(Tux_Trans_melt, tcons_map[,c(1,3)], by.x="Var1", by.y="tracking_id")
head(Tux_Trans_melt)
colnames(Tux_Trans_melt) <- c("BioID", "SampleID", "Count")
head(Tux_Trans_melt)
Tux_Trans_melt           <- Tux_Trans_melt[,c(4,2,3)]
colnames(Tux_Trans_melt) <- c("BioID", "SampleID", "Count")
head(Tux_Trans_melt)
pheno_in
match(Tux_Trans_melt$SampleID, pheno_in$Sample)
Tux_Trans_melt$Type      <- pheno_in[match(Tux_Trans_melt$SampleID, pheno_in$Sample),]$Treatment
head(Tux_Trans_melt)
pheno_in
head(xloc_map)
head(tcons_map)
library(cummeRbund)
setwd("~/Documents/Bioinformatics/Customers/Young/Test/grch38_No_Novel_v2/")
xloc_map             <- read.table("genes.fpkm_tracking", sep="\t", header=T)
tcons_map            <- read.table("isoforms.fpkm_tracking", sep="\t", header=T)
cuff                 <- readCufflinks()
##'-----------------------------------------------------------------------------------------#
##'Get Normalised Counts - Tuxedo - Gene Level
##'-----------------------------------------------------------------------------------------#
Tuxedo_Gene_Counts       <- repCountMatrix(genes(cuff))
# gene.counts.fpkm      <- repFpkmMatrix(genes(cuff))
##'-----------------------------------------------------------------------------------------#
##'Get Normalised Counts - Tuxedo - Transcript Level
##'-----------------------------------------------------------------------------------------#
Tuxedo_Transcript_Counts <- repCountMatrix(isoforms(cuff))
# isoform.counts.fpkm   <- repFpkmMatrix(isoforms(cuff))
##'-----------------------------------------------------------------------------------------#
##'Save Tables
##'-----------------------------------------------------------------------------------------#
save(Tuxedo_Gene_Counts, Tuxedo_Transcript_Counts, tcons_map[,c(1,3,4)],
file="Tuxedo_Data.Rdata")
##'-----------------------------------------------------------------------------------------#
tuxedo_map           <- tcons_map[,c(1,3,4)]
save(Tuxedo_Gene_Counts, Tuxedo_Transcript_Counts, tuxedo_map,
file="Tuxedo_Data.Rdata")
library(reshape2)
library(scales)
library(ggplot2)
setwd("~/Documents/Repos/Bioinformatics_Sprt_Code/R/RNASeq_Tool_Compare")
load("RData/Annotation_Data.Rdata")
load("RData/DESeq2_Data.Rdata")
load("RData/Salmon_Data.Rdata")
load("RData/Kallisto_Data.Rdata")
load("RData/Tuxedo_Data.Rdata")
head(tuxedo_map)
Tux_Trans_melt           <- melt(as.matrix(Tuxedo_Transcript_Counts))
Tux_Trans_melt           <- merge(Tux_Trans_melt, tuxedo_map[,c(1,2)], by.x="Var1", by.y="tracking_id")
Tux_Trans_melt           <- Tux_Trans_melt[,c(4,2,3)]
colnames(Tux_Trans_melt) <- c("BioID", "SampleID", "Count")
Tux_Trans_melt$Type      <- pheno_in[match(Tux_Trans_melt$SampleID, pheno_in$Sample),]$Treatment
Tux_Trans_melt$Tool      <- "Tuxedo"
Tux_Gene_melt            <- melt(as.matrix(Tuxedo_Gene_Counts))
head(Tux_Gene_melt)
colnames(Salmon_Gene_Counts)       <- pheno_in$Sample
colnames(Salmon_Trans_Counts)      <- pheno_in$Sample
colnames(Tuxedo_Transcript_Counts) <- c(as.vector(pheno_in[pheno_in$Treatment == "NOF",]$Sample),
as.vector(pheno_in[pheno_in$Treatment == "OA",]$Sample))
colnames(Tuxedo_Gene_Counts)       <- c(as.vector(pheno_in[pheno_in$Treatment == "NOF",]$Sample),
as.vector(pheno_in[pheno_in$Treatment == "OA",]$Sample))
Tux_Trans_melt           <- melt(as.matrix(Tuxedo_Transcript_Counts))
Tux_Trans_melt           <- merge(Tux_Trans_melt, tuxedo_map[,c(1,2)], by.x="Var1", by.y="tracking_id")
Tux_Trans_melt           <- Tux_Trans_melt[,c(4,2,3)]
colnames(Tux_Trans_melt) <- c("BioID", "SampleID", "Count")
Tux_Trans_melt$Type      <- pheno_in[match(Tux_Trans_melt$SampleID, pheno_in$Sample),]$Treatment
Tux_Trans_melt$Tool      <- "Tuxedo"
Tux_Gene_melt            <- melt(as.matrix(Tuxedo_Gene_Counts))
head(Tux_Gene_melt)
head(tuxedo_map)
Tux_Gene_melt            <- merge(Tux_Gene_melt, tuxedo_map[,c(1,3)], by.x="Var1", by.y="gene_id")
Tux_Gene_melt            <- Tux_Gene_melt[,c(4,2,3)]
colnames(Tux_Gene_melt)  <- c("BioID", "SampleID", "Count")
Tux_Gene_melt$Type       <- pheno_in[match(Tux_Gene_melt$SampleID, pheno_in$Sample),]$Treatment
Tux_Gene_melt$Tool       <- "Tuxedo"
head(Tux_Gene_melt)
Tux_Gene_melt            <- melt(as.matrix(Tuxedo_Gene_Counts))
Tux_Gene_melt            <- merge(Tux_Gene_melt, tuxedo_map[,c(1,3)], by.x="Var1", by.y="gene_id")
head(Tux_Gene_melt)
Tux_Gene_melt            <- melt(as.matrix(Tuxedo_Gene_Counts))
Tux_Gene_melt            <- merge(Tux_Gene_melt, tuxedo_map[,c(2,3)], by.x="Var1", by.y="gene_id")
Tux_Gene_melt            <- Tux_Gene_melt[,c(4,2,3)]
head(Tux_Gene_melt)
head(annotation)
head(tuxedo_map)
tuxedo_mega_map <- merge(tuxedo_map, annotation, by.x="nearest_ref_id", by.y="ensembl_transcript_id")
head(tuxedo_mega_map)
Tux_Gene_melt            <- melt(as.matrix(Tuxedo_Gene_Counts))
Tux_Gene_melt            <- merge(Tux_Gene_melt, tuxedo_mega_map[,c(3,4)], by.x="Var1", by.y="gene_id")
head(Tux_Gene_melt)
Tux_Gene_melt            <- Tux_Gene_melt[,c(4,2,3)]
colnames(Tux_Gene_melt)  <- c("BioID", "SampleID", "Count")
Tux_Gene_melt$Type       <- pheno_in[match(Tux_Gene_melt$SampleID, pheno_in$Sample),]$Treatment
Tux_Gene_melt$Tool       <- "Tuxedo"
head(Tux_Gene_melt)
Tux_Gene_melt[1:25,]
Tux_Gene_melt[1:35,]
Tux_Gene_melt            <- melt(as.matrix(Tuxedo_Gene_Counts))
head(Tux_Gene_melt)
nrow(Tux_Gene_melt)
foo <- merge(Tux_Gene_melt, tuxedo_mega_map[,c(3,4)], by.x="Var1", by.y="gene_id")
nrow(foo)
head(Tux_Gene_melt)
head(tuxedo_mega_map)
length(unique(tuxedo_mega_map$ensembl_gene_id))
gene_map                 <- unique(tuxedo_mega_map[,c(3,4)])
nrow(gene_map)
head(gene_map)
gene_map                 <- unique(tuxedo_mega_map[,c(3,4)])
Tux_Gene_melt            <- melt(as.matrix(Tuxedo_Gene_Counts))
Tux_Gene_melt            <- merge(Tux_Gene_melt, gene_map, by.x="Var1", by.y="gene_id")
Tux_Gene_melt            <- Tux_Gene_melt[,c(4,2,3)]
colnames(Tux_Gene_melt)  <- c("BioID", "SampleID", "Count")
Tux_Gene_melt$Type       <- pheno_in[match(Tux_Gene_melt$SampleID, pheno_in$Sample),]$Treatment
Tux_Gene_melt$Tool       <- "Tuxedo"
head(Tux_Gene_melt)
DES_Gene_melt            <- melt(as.matrix(DESeq2_Gene_Counts))
head(DES_Gene_melt)
colnames(DES_Gene_melt)  <- c("BioID", "SampleID", "Count")
DES_Gene_melt$Type       <- pheno_in[match(DES_Gene_melt$SampleID, pheno_in$Sample),]$Treatment
DES_Gene_melt$Tool       <- "DESeq2"
Sal_Gene_melt            <- melt(as.matrix(Salmon_Gene_Counts))
colnames(Sal_Gene_melt)  <- c("BioID", "SampleID", "Count")
Sal_Gene_melt$Type       <- pheno_in[match(Sal_Gene_melt$SampleID, pheno_in$Sample),]$Treatment
Sal_Gene_melt$Tool       <- "Salmon"
head(Sal_Gene_melt)
unique(Sal_Gene_melt$SampleID)
Sal_Trans_melt           <- melt(as.matrix(Salmon_Trans_Counts))
colnames(Sal_Trans_melt) <- c("BioID", "SampleID", "Count")
Sal_Trans_melt$Type      <- pheno_in[match(Sal_Trans_melt$SampleID, pheno_in$Sample),]$Treatment
Sal_Trans_melt$Tool      <- "Salmon"
head(Sal_Trans_melt)
Kal_Trans_melt           <- melt(as.matrix(Kallisto_Transcript_Counts))
colnames(Kal_Trans_melt) <- c("BioID", "SampleID", "Count")
Kal_Trans_melt$Type      <- pheno_in[match(Kal_Trans_melt$SampleID, pheno_in$Sample),]$Treatment
Kal_Trans_melt$Tool      <- "Kallisto"
head(Kal_Trans_melt)
Tux_Trans_melt$unique    <- paste0(Tux_Trans_melt$BioID, "_", Tux_Trans_melt$SampleID)
head(Tux_Trans_melt)
foo <- merge(Kal_Trans_melt, Sal_Trans_melt, by="unique")
colnames(Salmon_Gene_Counts)       <- pheno_in$Sample
colnames(Salmon_Trans_Counts)      <- pheno_in$Sample
colnames(Tuxedo_Transcript_Counts) <- c(as.vector(pheno_in[pheno_in$Treatment == "NOF",]$Sample),
as.vector(pheno_in[pheno_in$Treatment == "OA",]$Sample))
colnames(Tuxedo_Gene_Counts)       <- c(as.vector(pheno_in[pheno_in$Treatment == "NOF",]$Sample),
as.vector(pheno_in[pheno_in$Treatment == "OA",]$Sample))
Tux_Trans_melt           <- melt(as.matrix(Tuxedo_Transcript_Counts))
Tux_Trans_melt           <- merge(Tux_Trans_melt, tuxedo_map[,c(1,2)], by.x="Var1", by.y="tracking_id")
Tux_Trans_melt           <- Tux_Trans_melt[,c(4,2,3)]
colnames(Tux_Trans_melt) <- c("BioID", "SampleID", "Count")
Tux_Trans_melt$Type      <- pheno_in[match(Tux_Trans_melt$SampleID, pheno_in$Sample),]$Treatment
Tux_Trans_melt$Tool      <- "Tuxedo"
Tux_Trans_melt$unique    <- paste0(Tux_Trans_melt$BioID, "_", Tux_Trans_melt$SampleID)
gene_map                 <- unique(tuxedo_mega_map[,c(3,4)])
Tux_Gene_melt            <- melt(as.matrix(Tuxedo_Gene_Counts))
Tux_Gene_melt            <- merge(Tux_Gene_melt, gene_map, by.x="Var1", by.y="gene_id")
Tux_Gene_melt            <- Tux_Gene_melt[,c(4,2,3)]
colnames(Tux_Gene_melt)  <- c("BioID", "SampleID", "Count")
Tux_Gene_melt$Type       <- pheno_in[match(Tux_Gene_melt$SampleID, pheno_in$Sample),]$Treatment
Tux_Gene_melt$Tool       <- "Tuxedo"
Tux_Gene_melt$unique     <- paste0(Tux_Gene_melt$BioID, "_", Tux_Gene_melt$SampleID)
DES_Gene_melt            <- melt(as.matrix(DESeq2_Gene_Counts))
colnames(DES_Gene_melt)  <- c("BioID", "SampleID", "Count")
DES_Gene_melt$Type       <- pheno_in[match(DES_Gene_melt$SampleID, pheno_in$Sample),]$Treatment
DES_Gene_melt$Tool       <- "DESeq2"
DES_Gene_melt$unique     <- paste0(DES_Gene_melt$BioID, "_", DES_Gene_melt$SampleID)
Sal_Gene_melt            <- melt(as.matrix(Salmon_Gene_Counts))
colnames(Sal_Gene_melt)  <- c("BioID", "SampleID", "Count")
Sal_Gene_melt$Type       <- pheno_in[match(Sal_Gene_melt$SampleID, pheno_in$Sample),]$Treatment
Sal_Gene_melt$Tool       <- "Salmon"
Sal_Gene_melt$unique     <- paste0(Sal_Gene_melt$BioID, "_", Sal_Gene_melt$SampleID)
Sal_Trans_melt           <- melt(as.matrix(Salmon_Trans_Counts))
colnames(Sal_Trans_melt) <- c("BioID", "SampleID", "Count")
Sal_Trans_melt$Type      <- pheno_in[match(Sal_Trans_melt$SampleID, pheno_in$Sample),]$Treatment
Sal_Trans_melt$Tool      <- "Salmon"
Sal_Trans_melt$unique    <- paste0(Sal_Trans_melt$BioID, "_", Sal_Trans_melt$SampleID)
Kal_Trans_melt           <- melt(as.matrix(Kallisto_Transcript_Counts))
colnames(Kal_Trans_melt) <- c("BioID", "SampleID", "Count")
Kal_Trans_melt$Type      <- pheno_in[match(Kal_Trans_melt$SampleID, pheno_in$Sample),]$Treatment
Kal_Trans_melt$Tool      <- "Kallisto"
Kal_Trans_melt$unique    <- paste0(Kal_Trans_melt$BioID, "_", Kal_Trans_melt$SampleID)
foo <- merge(Kal_Trans_melt, Sal_Trans_melt, by="unique")
head(foo)
foo
foo <- foo[,c(1:4,9,10)]
colnames(foo) <- c("unique", "BioID", "SampleID", "KallistoCount", "SalmonCount", "Type")
head(foo)
png("test.png", width=4096, height=3096, units="px", res=300)
ggplot(foo[foo$SampleID == "Flowcell_A_1",], aes(x=KallistoCount, y=SalmonCount)) +
geom_point() +
theme_bw() +
facet_grid(. ~ Type)
dev.off()
png("test.png", width=4096, height=3096, units="px", res=300)
ggplot(foo[foo$SampleID == "Flowcell_A_1",], aes(x=KallistoCount, y=SalmonCount)) +
geom_point() +
theme_bw() +
facet_grid(. ~ Type) +
coord_trans(x="log2", y="log2")
dev.off()
png("test.png", width=4096, height=3096, units="px", res=300)
ggplot(foo[foo$SampleID == "Flowcell_A_1",], aes(x=KallistoCount, y=SalmonCount)) +
geom_point() +
theme_bw() +
facet_grid(. ~ Type)
dev.off()
df_in <- foo[foo$SampleID == "Flowcell_A_1",]
df_in$KallistoCount <- log2(df_in$KallistoCount)
df_in$SalmonCount   <- log2(df_in$SalmonCount)
png("test.png", width=4096, height=3096, units="px", res=300)
ggplot(df_in, aes(x=KallistoCount, y=SalmonCount)) +
geom_point() +
theme_bw() +
facet_grid(. ~ Type)
dev.off()
ggplot(df_in, aes(x=KallistoCount, y=SalmonCount)) +
geom_point() +
theme_bw() +
facet_grid(. ~ Type)
df_in <- foo[foo$SampleID == "Flowcell_A_1",]
df_in$SalmonCount   <- log2(df_in$SalmonCount + 1)
df_in$KallistoCount <- log2(df_in$KallistoCount + 1)
ggplot(df_in, aes(x=KallistoCount, y=SalmonCount)) +
geom_point() +
theme_bw() +
facet_grid(. ~ Type)
df_in <- foo
df_in$SalmonCount   <- log2(df_in$SalmonCount + 1)
df_in$KallistoCount <- log2(df_in$KallistoCount + 1)
png("test.png", width=4096, height=8096, units="px", res=300)
ggplot(df_in, aes(x=KallistoCount, y=SalmonCount)) +
geom_point() +
theme_bw() +
facet_grid(SampleID ~ Type)
dev.off()
